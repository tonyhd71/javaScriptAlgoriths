SLIDING WINDOW
This pattern involves creating a window which can either be an array or number from one position to another

Depending on a certain condition, the window either increases or closes (and a new window is created)

Very useful for keeping track of a subset of data in an arrat/string etc.
for example, you can use sliding window to find the longest sequence of unique values in the string 'hellothere', which is lother

Another example is to find a maxSubarraySum:

Write a function called maxSubarraySum which accepts an array of integers and a number called n. The function should calculate the maximum sum of n consecutive elements in the array.
maxSubArray([1,2,5,2,8,1,5],2) //10
maxSubArray([1,2,5,2,8,1,5],4) //17
maxSubArray([4,2,1,6],1) //10
maxSubArray([4,2,1,6,2]],4) //13
maxSubArray([],4) // null
			DIVIDE AND CONQUER
	this patters involves dividingn a data set into smaller chunks and then
repeating a process with a subset of data.
This pattern can tremendously decrease time complexity/
Write a function that accepts an integer and an array as an input and return the index of that number in the array.

A NAIVE SOLUTION ------------------------------>This is linear search. Time complexity O(N)
function search (arr,val) {
	for (let i = 0; i < arr.length; i++) {
		if (arr[i] === val) {
			return i'
		}
	}
}																	
																	Refactor
function search(array, val) {
	let min = 0;
	let max = array.length -1;
	while (min <= max) {
		let middle = Math.floor(min + max) / 2;
		let 
	}
}
#April 26 2023 GET SINGLY LINKED LIST
Get is a method that takes a number, index, or position and returns an item in that position. 0 should give us the first item, 4 should give us the fifth position
We are manually counting, not like an array
#PSEUDOCODE FOR GET
-This function should accept an index
-If the index is less than zero or greater than zero, return null
-Loop through the list until you reach the index and return the node at that specific index
-
//SHIFT NOTES 4/28/23
Shifting pseudocode
-  If there are no nodes, return undefined
- Store theb current head property in a variable
- Set the head property to be the current head's next property
- Decrement the length by 1
- Return the value of the node removed
//UNSHIFTING PSEUDOCODE
- This function should accept a value
- Create a new node using the value passed to the function
- Otherwise se the newly created node's next property to be the current head property on the list
- Set the head property on the list to be that newly created node
//GET NOTES 
-n get is a method that takes a number index or position and returns the item in that position.
- takes in a number, traverse the list that many times and then return item at that index
- not as efficient as an array 
//GET PSEUDOCODE
-this function should accept an index
- if the index is less than zero or greater than or equal to the length of the list, return null 
- loop through the list until you reach the index and return the node at that specific index
//SET notes
- Changing the value of a node based on its position in the linked list
- set is a method that will accept two things, a position or index, and a value to update that item at that index to
//SET PSEUDOCODE
- This function should accept a value and an index
- Use your get function to find that specific node
-If the node is not found, return false
- If the node is found, set the value of that node to be the value passed to the function and return true
//INSERT NOTES
-Adding a node to the linked list at a specific position  
-Takes an index and a value
- INSERT PSEUDOCODE
-if the index is less than zero or greater than the length, return false
- If the index is the same as the length, push a new node to the end of the list
- If the index is 0, unshift a new node to the start of the list 
- Otherwise, using the get method, access the node at the index - 1
- Set the property on that node to be the new node
-Set the next property on the new node to be the previous next
- increment the length
- return true
 

